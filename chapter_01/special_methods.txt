The first thing to know about special methods is that they are meant to be called by the Python interpreter,
and not by you. You don’t write my_object.__len__(). You write len(my_object) and, if my_object is an instance
of a user-defined class, then Python calls the __len__ method you implemented.

But the interpreter takes a shortcut when dealing for built-in types like list, str, bytearray, or extensions like
the NumPy arrays. Python variable-sized collections written in C include a struct2 called PyVarObject, which
has an ob_size field holding the number of items in the collection. So, if my_object is an instance of one of
those built-ins, then len(my_object) retrieves the value of the ob_size field, and this is much faster
than calling a method.

More often than not, the special method call is implicit. For example, the statement for i in x: actually causes
the invocation of iter(x), which in turn may call x.__iter__() if that is available, or use x.__getitem__()—as
in the FrenchDeck example.

Normally, your code should not have many direct calls to special methods. Unless you are doing a lot of metaprogramming,
you should be implementing special methods more often than invoking them explicitly. The only special method that
is frequently called by user code directly is __init__, to invoke the initializer of the superclass in
your own __init__ implementation.

If you need to invoke a special method, it is usually better to call the related built-in function
(e.g., len, iter, str, etc). These built-ins call the corresponding special method, but often provide other
services and—for built-in types—are faster than method calls.